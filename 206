both O(n), pre - node if node == None, get to terminal, return preâ€¨keep record of node.next as temporary value then reverse from pre -> node to node -> pre

class Solution(object):
    def reverseList(self, head):
        pre = None
        node = head
        while node is not None:
            next = node.next
            node.next = pre
            pre = node
            node = next
        return pre

another solution keep start always unchanged, then point to last reverse one: helpful for more general reverse eg. mth node to nth node
    def reverseList(self, head):
        superHead = ListNode(0)
        superHead.next = head
        start = superHead.next
        while start != None and start.next != None:
            then = start.next
            start.next = then.next
            then.next = superHead.next
            superHead.next = then
        return superHead.next

"def helper(pre, node):
    if node is None:
        return pre
    next = node.next
    node.next = pre
    return helper(node, next)
class Solution(object):
    def reverseList(self, head):
        return helper(None, head)"
