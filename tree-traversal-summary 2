# pre/post inorder
# iterative / recursive

1. recursive
def pre(node):
if node != None:
    # visit
	visit(node)
	self.pre(node.left)
	self.pre(node.right)

def inorder(node):
if node != None:
    # visit
    self.inorder(node.left)
    visit(node)
    self.inorder(node.right)

def post(node):
if node != None:
    # visit
    self.post(node.left)
    self.post(node.right)
    visit(node)

2. non-recursive/iterative
# pre/post
def pre(self, root):
	if root == None:
		return
	stack = []
	stack.append(root)
	while len(stack):
		cur = stack.pop()
		self.ans.append(cur.val)
		if cur.right:
			stack.append(cur.right)
		if cur.left:
			stack.append(cur.left)

def post(self, root):
    if root == None:
        return
    stack = []
    stack.append(root)
    while len(stack):
        cur = stack.pop()
        self.ans.append(cur.val)
        if cur.left:
            stack.append(cur.left)
        if cur.right:
            stack.append(cur.right)
    self.ans = self.ans[::-1]

# inorder
put all node's left node (include original node) into stack
then each time pop cur = node
visit node
if cur has right node cur = cur.right
put all left node of left node of this node (right node) 
until stack is empty
def inorderTraversal(self, root):
        stack = []
        ans = []
        if root == None:
            return ans
        cur = root
        while cur != None:
            stack.append(cur)
            cur = cur.left
        while len(stack):
            cur = stack.pop()
            ans.append(cur.val)
            cur = cur.right
            while cur != None:
                stack.append(cur)
                cur = cur.left
        return ans
