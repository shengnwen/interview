solution 1: identify each path from up to done, if found then add to ansO(n), O(n)â€¨solution 2: more compress O(n), O(n)

def gen(ans, node, pre, sumVal):
    if node == None:
        return
    pre.append(node.val)
    if node.left == node.right == None:
        if sum(pre) == sumVal:
            ans.append([i for i in pre])
        return
    if node.left:
        gen(ans, node.left, [i for i in pre], sumVal)
    if node.right:
        gen(ans, node.right, [i for i in pre], sumVal)
class Solution(object):
    def pathSum(self, root, sumVal):
        ans = []
        gen(ans, root,[], sumVal)
        return ans

class Solution(object):
    def pathSum(self, root, sumVal):
        if root == None:
            return []
        if root.left == root.right == None:
            if root.val == sumVal:
                return [[root.val]]
            else:
                return []
        post = self.pathSum(root.left, sumVal - root.val) + self.pathSum(root.right, sumVal - root.val)
        return [[root.val] + i for i in post]

